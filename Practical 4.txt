# 4 Title: Implement a solution for a constraint satisfaction problem using branch

# Taking the number of queens as input from the user
print("Enter the number of queens")
N = int(input())

# Creating a chessboard NxN matrix with all elements set to 0
board = [[0] * N for _ in range(N)]


def attack(i, j):
    # Checking vertically and horizontally
    for k in range(N):
        if board[i][k] == 1 or board[k][j] == 1:
            return True

    # Checking diagonally
    for k in range(N):
        for l in range(N):
            if (k + l == i + j) or (k - l == i - j):
                if board[k][l] == 1:
                    return True

    return False


def N_queens(n):
    if n == 0:
        return True

    for i in range(N):
        for j in range(N):
            if not attack(i, j) and board[i][j] != 1:
                board[i][j] = 1
                if N_queens(n - 1) == True:
                    return True
                board[i][j] = 0

    return False


N_queens(N)
for i in board:
    print(i)


Output: 
D:\Practical\LP-II\venv\Scripts\python.exe D:\Practical\LP-II\p4.py 
Enter the number of queens
8
[1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]

Process finished with exit code 0

